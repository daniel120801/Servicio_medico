import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { IAlumnoHeaders } from '../models/alumno.model';
import { Alumno } from '../models/alumno.model';
import { BehaviorSubject, Observable } from 'rxjs';

@Injectable()
export class AlumnosService {
  private apiUrl = 'https://dandi1333.great-site.net/Estadias/Alumnos';

  private _routesObserver = new BehaviorSubject<any>(ParentPages.BUSCADOR);

  // Observable público para suscribirse
  public routesObserver$: Observable<any> = this._routesObserver.asObservable();


  constructor(private http: HttpClient) { }

  toSearch() {
    this._routesObserver.next(ParentPages.BUSCADOR);

  }
  toPerfil() {
    this._routesObserver.next(ParentPages.PERFIL);
  }
  toConferAsistidas() {
    this._routesObserver.next(ParentPages.CONFER_ASISTIDAS);
  }
  toSegMedico() {
    this._routesObserver.next(ParentPages.SEG_MEDICO);
  }

  essentials = class Essentials {

    alumnos: IAlumnoHeaders[] = [];

    constructor(private parent: AlumnosService) {

    }
    public getAlumnosHeaders() {
      this.parent.http.get(this.parent.apiUrl + '?allheaders=').subscribe(
        {
          next: (response) => {
            this.alumnos = <IAlumnoHeaders[]>response;
            console.log('Alumnos obtenidos:', this.alumnos);
          },
          error: (error) => {
            console.error('Error al obtener alumnos:', error);
            //TODO: quitar los items de prueba una vez funcione el api
            this.alumnos.push(new Alumno({
              headers: {
                id: 1,
                nombre: 'Error 1',
                matricula: '23005001',
                carrera: 'Carrera 1'
              }
            }));
            this.alumnos.push(new Alumno({
              headers: {
                id: 2,
                nombre: 'Error 2',
                matricula: '23005002',
                carrera: 'Carrera 2'
              }
            }));
            //*-----------------------
          }
        }
      );

      return this.alumnos
    }

    public fillFilter(): IAlumnoHeaders[] {
      return this.alumnos;
    }

    public filterAlumnos(text: string, filterMode: FilterMode): IAlumnoHeaders[] {
      //TODO: arreglar filtro
      // 1. Validación más explícita
      if (!this.alumnos || this.alumnos.length === 0) {
        console.warn('No hay alumnos para filtrar o texto de búsqueda vacío');
        return [];
      }
      if (!text.trim()) {
        console.warn('Texto de búsqueda vacío o solo espacios');
        return this.fillFilter();
      }
      // 2. Normalizar el texto de búsqueda una sola vez
      const searchText = text.toLowerCase();

      // 3. Filtrado con switch más claro
      return this.alumnos.filter((alumno: IAlumnoHeaders) => {
        let fieldToSearch: string;

        switch (filterMode) {
          case FilterMode.MATRICULA:
            fieldToSearch = alumno.matricula?.toLowerCase() || '';
            break;
          case FilterMode.CARRERA:
            fieldToSearch = alumno.carrera?.toLowerCase() || '';
            break;
          case FilterMode.NOMBRE:
            fieldToSearch = alumno.nombre?.toLowerCase() || '';
            break;
          default: // FilterMode.NOMBRE por defecto
            fieldToSearch = alumno.nombre?.toLowerCase() || '';
        }
        console.log("state filter: " + fieldToSearch.includes(searchText));

        return fieldToSearch.includes(searchText);
      });
    }

  }
  generals = class Generals {
    alumno: Alumno | null = null;
    constructor(private parent: AlumnosService) {
    }
    getAlumno(id: number): Observable<Alumno> {

      return this.parent.http.get<Alumno>(this.parent.apiUrl + '?id=' + id);
    }



  }

}
export enum FilterMode {
  NOMBRE,
  MATRICULA,
  CARRERA
}
export enum ParentPages {
  BUSCADOR = 'buscador',
  PERFIL = 'perfil',
  CONFER_ASISTIDAS = 'confer_asistidas',
  SEG_MEDICO = 'seg_medico'
}


